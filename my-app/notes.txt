--------Запустить код в браузере: через html файл

--------Тернарный оператор:
const n = 5;
(n == 4) ? console.log(n + "=4") : console.log(n + "!=4");


------Oператор switch-case: (работает только со строгим сравнением "=")
switch (n) {
    case 1:
        console.log("no");
        break;
    case 2:
        console.log("no");
        break;
    case 5:
    console.log("yes");
        break;
    default:
        console.log("no!!")
}

-----------------Условия:
let num = 50;

while (num < 55) {
    console.log(num);
    num++;
}

do {
    console.log(num);
    num++;
} 
while (num < 55);

for (let i = 1; i < 8; i++) {
    console.log(i);
}

-------------------- Функции
- Замыкание функций - это сама функция вместе со всеми внешними переменными, к-е ей доступны.
- FUNCTION DECLARATION: Функцию можно использовать в коде еще до ее объявления, т.к. она существует еще до запуска кода.
    function main() {
        // body
    }
    main();

- FUNCTION EXPRESSION (функциональное выражение): вызывается только после объявления.
    const a = function () {
        console.log('aaa');
    }
    a();

- Стрелочная функция: не имеет своего контекста.
    const calc2 = (b, c) => b + c; // если функция простая, можно опустить скобки
    const calc3 = b => b + 1; // если функция содержит один аргумент
    const calc4 = (b, c) => {
        let res = b + c;
        return res;
    };

------------------------Полезные методы (работа со строками)
- toUpperCase() - делает буквы в строке заглавными
- toLowerCase() - делает буквы в строке строчными
- indexOf() - поиск подстроки
  - Методы, которые меняют строку:
    slice(7, 11) - 7 это начало строки, 11 это конец строки, которую надо обрезать
    slice(-5, -1) - с конца строки
    substring(0, 4) - (можно задать 1й аргумент больше чем 2й), не поддерживает отрицательные значения
    substr(from: 0, length: 4) - задается длина

-------------------(работа с числами)
- Math.round() - округление до целого
- parseInt() - привести к инту
- parseFloat() - привести к флоату

--------------------- Функция callback
- Вызывается только после выполнения предыдущей
    function done() {
        console.log('done');
    }
    main('JS', done);
    ////////////////////////////// or /////////
    function main(lang, callback) {
        console.log(`learning: ${lang}`);
        callback();
    }
    //вызов функции main, передаем ей ф-ю callback
    main('JS', function() { // это анонимная функция
        console.log('done');
    });

--------------------------- Объекты (или ассоциативные массивы)
- Пройти по значениям и ключам объекта:
    for (let key in options) {
        console.log(`св-во ${key} имеет знач-е ${options[key]}`);
    }
- Object.keys(имя массива) - Вывести ключи объекта:
- Object.keys(имя массива).length - длина (кол-во элементов)
- Можно создать метод внутри объекта:
    const options = {
        colors: {
                border: 'black',
                bg: 'red',
            },
        makeTest: function () {
            console.log("Test")
        }
    };

- Деструктуризация (вытаскивание свойств из объекта в качестве переменной):
    const {border, bg} = options.colors; - const {свойство1, свойство2} = объект.объектВнутри


---------------------------- Массивы
- arr.length; - длина = индекс последнего эл-та + 1
- arr.pop(); - удалить последний элемент
- arr.push(10); - добавить элемент в конец массива

- Перебирающие методы:
    - Метод forEach (исп-ся чаще всего):
        arr.forEach(function (item, i, arr) {
            console.log(`${i}: ${item} inside array ${arr}`)
        });
        // вывод:
        0: 1 inside array 1,2,3,4
        1: 2 inside array 1,2,3,4
        2: 3 inside array 1,2,3,4
        3: 4 inside array 1,2,3,4

    - Цикл for...of (можно использовать break и continue):
        for (let value of arr) {
            //body
        }

    - Метод sort: products.sort(); - сортирует массив по строкам в алфавитном порядке

    - str.split(', '); - разделяет массив по введенному разделителю

    - products.join('; ') - соединяет массив, добавляет введенный разделитель

    - Сортировка массива цифр:
        const arr = [1, 12, 6, 4];
        arr.sort(compareNum);

        function compareNum(a, b) {
            return a - b;
        }

    - Псевдомассивы - у них нет методов (sort, push...), они просто хранят методы по порядку.

------------------------ Копии объектов
- ПОВЕРХНОСТНЫЕ КОПИИ:
    - Поверхностная копия с циклами (вложенные массивы всё еще ссылки, работа со свойствами идет только на 1м уровне):
        function copy(mainObj) {
            let objCopy = {};

            for (let key in mainObj) {
                objCopy[key] = mainObj[key];
            }
            return objCopy;
        }

        const numbers = {
            a: 2,
            b: 5,
            c: {
                x: 6,
                y: 7
            }
        };
        const newNumbers = copy(numbers);

    - Независимая поверхностная копия:
        Object.assign({}, arr2) - из одного
        Object.assign(arr1, arr2) - из двух массивов

    - Метод slice()
        const oldArr = ['a', 'b', 'c'];
        const newArr = oldArr.slice();

    - Еще способ:
        const arr = ['a', 'b'];
        const newArr = [...arr];

    - И еще:
        const aaa = {
            a: 1,
            b: 2
        };
        const newObj = {...aaa};
        console.log(newObj);

- Spread оператор:
    (соединение двух массивов):
        const arr1 = ['a', 'b', 'c'],
              arr2 = ['d', 'e', 'f'],
              arr3 = [...arr1, ...arr2, 'o', 'k'];
        ////////////
    (разделение массива для передачи в метод):
        function log(a, b, c) {
            //body
        }
        const n = [2, 5, 7];
        log(...n);

----------------------- Прототип объекта
- Если в динамике (объект уже существовал,
    нужно установить его прототип):

    const woman = {
        health: 300,
        height: 170
    }
    const kate = {
        health: 200
    }
    Object.setPrototypeOf(kate, woman);
    console.log(kate.height);

- На моменте создания объекта:
    const kate = Object.create(woman);

----------------------------- Динамическая типизация
  1) Конкатенация: (5 + "") или ("а" + 5) - превращает в строку
  2) Унарный плюс: +"5" - в число
  3) parseInt()
  5) to boolean:
    false = 0, '', null, undefined, NaN
  6) !!"44" - превращает в булиновое значение (очень редко используется)

    [] + false = "false", здесь пустой массив приводит к строковому типу, т.е. []=""

    Оператор "и" запинается на лжи: 2 && 1 && null && 0 && undefined = null
        т.к. null - первое значение ложь, он и возвращается
    Оператор "или" запинается на правде


--------------------------- Методы для получения элементов со страницы
- Устаревшие методы:
    - const box = document.getElementById('box'); - получить по айди
    - const btns = document.getElementsByTagName('button'); - получить html-коллекцию (ПСЕВДОМАССИВ элементов) по имени тега
    - const btns = document.getElementsByTagName('button')[1]; - получить элменет коллекции

- Более современные:
    - Работа с css селектором: querySelectorAll();
      const hearts = document.querySelectorAll('.heart'); //ставим точку перед именем, чтобы обозначить, что это класс
      const oneHeart = document.querySelector('.heart'); - возвращает один элемент (если их много, то первый)

-------------------------- Действия с элементами на странице---------------------------------------
- Способы менять стиль элемента:
    console.dir(box);
    box.style.backgroundColor = "blue";
    box.style.width = "500px";
    btns[1].style.borderRadius = '100%';
    poster.style.backgroundImage = 'url("img/bg.jpg")'; //обязательно использовать разные кавычки
    list.innerHTML = ''; // опустошить псевдомассив элементов

    box.style.cssText = 'background-color: red; width: 500px';

- Менять стиль всех элементов в массиве:
    hearts.forEach(item => {
        item.style.backgroundColor = "blue";
    });

- Создание элемента, к-й существует только внутри js, на странице он не появится:
    const div = document.createElement('div');

    div.classList.add('black'); //лежит только внутри скрипта

    document.body.append(div); //добавление див в конец бади

wrapper.prepend(div); //помещает блок в конец элемента
hearts[0].before(div); //помещает блок перед элементом
circles[0].remove();
hearts[0].replaceWith(circles[0]);

- !!!!! Часто исп-ся:
    div.innerHTML = "<h1>Hello</h1>"; //вставить структуру HTML
    div.textContent = 'Hello'; //только текст

- Метод вставить блок:
    div.insertAdjacentHTML('beforebegin', '<h2>Hello</h2>');
    - beforebegin //перед началом блока
    - afterbegin //после начала блока (т.е. в начало самого блока)
    - beforeend //перед концом блока (т.е. в конец самого блока)
    - afterend //после конца блока

- Получить содержимое элемента:
    console.log(poster.innerHTML)

- Вставить что-то (напр. структуру) в псевдомассив
       movieDB.movies.forEach((film, i) => {
           list.innerHTML += `
               <li class="promo__interactive-item">
                   ${i+1} ${film} <div class="delete"></div>
               </li>
           `;
       });


---------------- СЛУШАТЕЛИ СОБЫТИЙ -------------
- Создание:
    const btn = document.querySelector('button');

    btn.addEventListener('click', () => {
        //действия
    });

    btn.addEventListener('click', () => {
         //действия2
    });
    // такой код будет срабатывать оба раза

- Надо передавать событие в качестве аргумента
    btn.addEventListener('click', (event) => {
        // console.log(event.target);
    });

- Добавить слушатель и удалить после 1го нажатия на кнопку:

        const btn = document.querySelector('button');

        let i = 0;
        const del = (event) => {
            console.log(event.target);
            i++;
            if (i == 1) {
                btn.removeEventListener('click', del);
            }
        };

        btn.addEventListener('click', del);

ВСПЛЫТИЕ СОБЫТИЙ - когда обработчик срабатывает сначала на самом вложенном
    элементе, затем на родителе, затем выше и т.д.

- Предотвратить выполнение дефолтного действия:
    const link = document.querySelector('a');
    link.addEventListener('click', (e) => {
        e.preventDefault();
    });

- НАЗНАЧЕНИЕ ОБРАБОТЧИКА НА НЕСКОЛЬКО ЭЛ-В:
    const btns = document.querySelectorAll('button');
    btns.forEach(btn => {
        btn.addEventListener('click', del);
    });

- ОПЦИИ:
    - once:
        btns.forEach(btn => {
            btn.addEventListener('click', del, {once: true});
        });

---------------------- ДОМ-элементы ------------------
УЗЛЫ (НОДЫ) - то что не теги (напр. текст)

- (document.body); //информация о боди
- (document.documentElement); //инфа об элементе
- (document.body.childNodes); //дочерние узлы (напр. текст)
- (document.body.firstChild);
- (document.body.lastChild);
- (document.querySelector('[data-current="3"]').nextSibling); //выбор по дата-атрибуту
- (document.querySelector('#current').parentNode); //родитель текущего класса

ДОМ-ЭЛЕМЕНТЫ - теги html
    - nextElementSibling //выбор следующего элемента
    - firstElementChild //выбор первого дочернего элемента

- Перебираем элементы и пропускаем текстовые ноды:
    for (let node of document.body.childNodes) {
        if (node.nodeName == "#text") {
            continue;
        }
        console.log(node);
    }

ОБРАБОТЧИК СОБЫТИЙ, КОТОРЫЙ ПРОВЕРЯЕТ, ЗАГРУЗИЛИСЬ ЛИ ДОМ-ЭЛЕМЕНТЫ:
    document.addEventListener('DOMContentLoaded', () => {
        //тут весь остальной код на странице
    }

- Узнать, отмечена ли галочка чекбокса:
      const favourite = checkBox.checked;
- Получить введенное в форму значение:
      const newFilm = addInput.value;

------------------------- События на мобильных устройствах------------

- touchstart - при касании
- touchmove - при движении пальца
- touchend - когда палец оторвался
- touchenter - когда палец зашел на элемент
- touchleave - палец не оторвался но ушел за пределы
- touchcansel - когда точка соприкосновения выходит за пределы

СВОЙСТВА ПРИ РАБОТЕ С СЕНСОРНЫМИ УСТРОЙСТВАМИ:
- touches - выдает список всех пальуев к-е взаимодействуют сейчас с экраном
- targetTouches - все пальцы к-е взаим-ют с конкретным эл-м
- changedTouches - список пальцев, к-е участвуют в текущем событии

ПРИМЕР ДОБАВЛЕНИЯ СОБЫТИЯ
    const box = document.querySelector('.box');

        box.addEventListener('touchstart', (e) => {
            e.preventDefault();

            console.log('start');
            console.log(e.targetTouches);
        });

------------------Атрибуты, динамические скрипты-------------------
- defer:
    <script defer src="js/script.js"></script>
    - скрипт с этим атрибутом не блокирует страницу, срабатывает сначала

- async:
    <script async src="js/script.js"></script>
    - скрипт начнет загружаться, как только будет загружен, никого не ждет
    - и другие скрипты не будут его ждать
    - НЕ ДОЛЖЕН ЗАВИСИТЬ ОТ ДОМ-СТРУКТУРЫ И ДРУГИХ СКРИПТОВ

- можно загрузить скрипт динамически (ведут себя как async)
    const script = document.createElement('script');
    script.src = 'js/test.js';
    document.body.append(script);

- или так (ведет себя как обычный скрипт):
    const script = document.createElement('script');
    script.src = 'js/test.js';
    script.async = false;
    document.body.append(script);

- строго друг за другом будут выполняться:
    function loadScript(src) {
        const script = document.createElement('script');
        script.src = 'js/test.js';
        script.async = false;
        document.body.append(script);
    }
    loadScript('js/test.js');
    loadScript('еще один скрипт');

---------------------- ClassList и делегирование событий-----------

btns[0].classList - обратиться к классу
    - Кол-во классов элемента:
        btns[0].classList.length -
    - Позволяет получить класс, к-й располагается под определенным индексом:
        btns[0].classList.item(0)
    - Добавить класс (классы)
        btns[0].classList.add("red", "blue")
    - Удалить класс
        btns[0].classList.remove("red")

!!! - Если класс есть, то он будет убран, если нет - добавлен:
        btns[0].classList.toggle("red")
    - Иногда вместо тоггла надо вручную проверить:
        btns[0].addEventListener('click', () => {
            if (!btns[1].classList.contains('red')) {
                btns[1].classList.add('red');
            } else {
                btns[1].classList.remove('red');
            }
        });

     - Метод contains():
          Определяет наличие класса и возвращает булиновое знач-е


ДЕЛЕГИРОВАНИЕ СОБЫТИЙ - работаем с родительским элементом и назначаем ф-ии для его потомков
wrapper.addEventListener('click', (e) => {
    if (e.target && e.target.tagName == "BUTTON") {
        //
    }
});

- Также хороший способ:
    if (e.target && e.target.matches("button.red"))

----------------ЧТОБЫ ЗАПУСТИТЬ Ф-Ю ЧЕРЕЗ ОПРЕД-Й ПРОМЕЖУТОК ВРЕМЕНИ:
    const timerId = setTimeout(function () {
        //
    }, 2000); //это 2 секунды

    /////// or with function //////

    const timerId = setTimeout(logger, 2000);
    function logger () {
        //
    };

/////// закончить действие
    clearInterval(timerId);
///////
    const btn = document.querySelector('.btn');
    let timerId; // глобальная переменная

    btn.addEventListener('click', () => {
        // const timerId = setTimeout(logger, 2000);
        const timerId = setInterval(logger, 2000); //каждые две секунды после клика будет выполняться
    });

    function logger () {
        if (i == 3) {
            clearInterval(timerId);
        }
        console.log('text');
        i++;
    };

РЕКУРСИВНЫЙ ВЫЗОВ setTimeout делают для того, чтобы задержка происходила правильно:
    если функция выполняется дольше, чем значение задержки, то задержка не выполнится,
    а при рекурсивном вызове выполнится.

let id = setTimeout(function log() {
    console.log('hello');
    id = setTimeout(log, 500);
}, 500);

АНИМАЦИЯ ПРОСТЕЙШАЯ:
    const btn = document.querySelector('.btn');
    let timerId, // глобальная переменная
    i = 0;

    function myAnimation() {
        const elem = document.querySelector('.box');
        let pos = 0;

        const id = setInterval(frame, 10);
        function frame() {
            if (pos == 300) {
                clearInterval(id);
            } else {
                pos++;
                elem.style.top = pos + 'px';
                elem.style.left = pos + 'px';
            }
        }
    }

    btn.addEventListener('click', myAnimation);

----------------- ДАТА --------------
- Дата хранится в милисекундах.
- Отсчет месяцев с 0.
- Соответствует часовому поясу местному.
const now = new Date(); //текущая дата
const now = new Date(2022, 5, 3, 20); //с параметрами год, месяц, день, часы

МЕТОДЫ:
    now.getFullYear()
    now.getMonth()
    getDate() //номер в месяце
    getDay() //номер дня недели (воскресенье - 0, пн - 1...)

    console.log(now.getHours());
    console.log(now.getUTCHours());
    console.log(now.getTimezoneOffset());
    console.log(now.getTime()); //кол-во милисекунд, к-е уже прошло

- Посмотреть время работы:
    let start = new Date();
    for(let i = 0; i < 1000000; i++) {
        let s = i ** 3;

    }
    let end = new Date();
    console.log(end - start)

-------------------- Таймер (обратный отсчет) ------------
//Timer

    const deadLine = '2022-05-11';

    function getTimeRemaining(endtime) {
        const t = Date.parse(endtime) - Date.parse(new Date()),
            days = Math.floor(t / (1000 * 60 * 60 * 24)),
            hours = Math.floor((t / (1000 * 60 * 60)) % 24),
            minutes = Math.floor((t / 1000 / 60) % 60),
            seconds = Math.floor((t / 1000) % 60);

        return {
            'total': t,
            'days': days,
            'hours': hours,
            'minutes': minutes,
            'seconds': seconds
        };
    }

    function getZero(num) {
        if (num >=0 && num < 10) {
            return `0${num}`;
        } else {
            return num;
        }
    }

    function setClock(selector, endtime) {
        const timer = document.querySelector(selector),
            days = timer.querySelector('#days'),
            hours = timer.querySelector('#hours'),
            minutes = timer.querySelector('#minutes'),
            seconds = timer.querySelector('#seconds'),
            timeInterval = setInterval(updateClock, 1000);

        updateClock();

        function updateClock() {
            const t = getTimeRemaining(endtime);

            days.innerHTML = getZero(t.days);
            hours.innerHTML = getZero(t.hours);
            minutes.innerHTML = getZero(t.minutes);
            seconds.innerHTML = getZero(t.seconds);

            if (t.total <= 0) {
                clearInterval(timeInterval);
            }
        }

    }

    setClock('.timer', deadLine);


--------------- Модальное окно ----------------

window.pageYOffset - прокрученная часть страницы

----------------- Функции-конструкторы --------------
function User(name, id) {
    this.name = name;
    this.id = id;
    this.human = true;
    this.hello = function () {
        console.log(`hello ${this.name}`);
    };
}

//если мы не имеем доступ к конструктору, исп-ем прототипирование
User.prototype.exit = function (name) {
    console.log(`user ${this.name} left`);
}

//функция стала конструктором и теперь мы создаем объект:
const mary = new User('mary', 20);
console.log(mary);
mary.hello();
mary.exit();

//Изначально в джаваскрипт не было классов, но потом они появились как "синтаксический сахар" для красоты кода и удобства

--------------------- Контекст вызова, this ----------
1) Обычная ф-я: this = window, но если use strict - undefined
2) Контекст у метода объекта - сам объект
3) this в конструкторах и классах - это новый экземпляр объекта
4) Ручная привязка this: call, apply, bind

//без строгого режима ссылается на глобальную переменную
function showThis() { //функция показывает контекст вызова
    console.log(this); //выведет в консоль window
}
showThis();

////////////////////////////////////
'use strict';
//в строгом режиме выведет undefined
function showThis() { //функция показывает контекст вызова
    console.log(this);
}
showThis();

///////////////////
'use strict';

function showThis(a, b) {
    console.log(this);
    function sum() {
        console.log(this);
        return a + b;
    }
    console.log(sum());

}
showThis(4, 5);

/////////////////// Получим обхект, в котором находится метод
'use strict';

const obj = {
    a: 20,
    b: 15,
    sum: function () {
        console.log(this);
    }
};
obj.sum();

//////////////////
const obj = {
    a: 20,
    b: 15,
    sum: function () {
        function shout() {
            console.log(this);
        }
        shout(); //выдаст undefined
    }
};
obj.sum();

/////////// Ручное присвоение контекста
function sayName(surname) {
    console.log(this.name + surname);
}

const user = {
    name: 'Mary'
};

sayName.call(user, 'Minikh');
sayName.apply(user, ['Minikh']);

- МЕТОД bind (!!!!!)
    //создает новую функцию:
    function count(num) {
        return this*num;
    }
    const double = count.bind(2);
    console.log(double(13));

// контекст - сам элемент, в к-м произошло событие, т.к. обычная коллбэк ф-я
// если была бы стрелочная ф-я (она не имеет своего контекста), то было бы undefined
    btn.addEventListener('click', function (){
        console.log(this);
    });

// испю стрелочную ф-ю, у которой нет контекста вызова (она берет контекст у родителя),
// ее родитель - метод sayNum. здесь this ссылается на сам объект
    const obj = {
      num: 5,
      sayNum: function () {
          const say = () => {
              console.log(this);
          };
          say();
      }
    };
    obj.sayNum();

// если тело ф-ии помещается в одну строку, то вместо:
    const double = (a) => {
        return a * 2;
    };
// можно написать:
    const double = (a) => a * 2;
//  или если один аргумент:
    const double = a => a * 2;


-------------------- Классы (стандарт ES6) ------------------
// Создание класса
    class Rectangle {
        constructor(height, width) {
            this.height = height;
            this.width = width;
        }
        calcArea() {
            return this.height * this.width;
        }
    }
    const square = new Rectangle(5, 2);

// НАСЛЕДОВАНИЕ
    class ColoredRectangleWithText extends Rectangle {
        constructor(height, width, text, color) {
            super(height, width);
            this.text = text;
            this.color = color;
        }

        showMyProps() {
            console.log(`Text: ${this.text}`);
        }
    }
    const div = new ColoredRectangleWithText(25, 10, 'Hello');
    div.showMyProps();
    console.log(div.calcArea());

// если метод используется только на месте:
    new MenuCard().render();


------------- Rest оператор и параметры по умолчанию ---------------
Rest оператор - означает что может быть любое кол-во остальных аргументов
- всегда записывается последним

    const log = function (a, b, ...rest) { //... - это rest оператор
        console.log(a, b, rest); //отдельные сущности соберутся в массив
    }
    log('basic', 'rest', 'o', 'u');

// параметры по умолчанию
    function calcOrDouble(num, basis = 2) { //парам. по умолч-ю
        console.log(num * basis);
    }
    calcOrDouble(3);

//найти максимальное значение в двух массивах:
    const arr1 = [1, 2, 3],
        arr2 = [43, 2, 6];
    const res = Math.max(...arr1, ...arr2);

// объекты тоже можно развернуть:
    const res = {...user, ...admin};


------------------ REACT --------------------
- Метод map:
    let answers = ['IvAn', 'MarY', 'HeLLo'];
    answers = answers.map((item) => item.toLowerCase());

- Упрощенное создание объектов
     const x =2, y = 5;
     const a = {x, y,
         calc() {
             //
         }
     }

- Деструктуризация: (вытаскиваем значение из объекта)
    const user = {
        name: {
            first: 'a'
        },
        pass: 'dd'
    }
    const {name: {first}, pass} = user;

    //Создание функции и передача парамеров
    function connect({
        host = 'lff',
        port = 3000,
        user = 'd'} = {}) { //по умолчанию пустой объект
            console.log(host, port, user)
    }

    connect({
        port: 3 // этот порт передается
    })

    ////////////
    const nums = [3, 5, 6];
    const [, , c] = nums;
    console.log(c);

    //////////////
    const nums = [[3, 5], 5, 6];
    const [[a, b], c, d] = nums;
    console.log(a, b, c, d);

    /////////////
    const country = {...};
    const {gender: {male: [a, b, c]}} = country;


------------- Модульная структура ------------
import Sl, {button} from './script';
import './index.css';
......
//в другом файле:
export {button};
export default Slider; //дефолт только 1 раз в файле

- Импорт реакта:
    import React, {Component} from 'react';


------------- ФРАГМЕНТЫ ----------
        <>
            <h1> My name is , surname - </h1>
            <a href="">My profile</a>
        </>

- Увеличиваем пол нажатию кнопки:
        nextYear() {
            console.log(1);
            this.setState(state => ({
                years: ++state.years
            }));
        }

- ПРИВЯЗАТЬ КОНТЕКСТ ВЫЗОВА У ОБРАБОТЧИКОВ СОБЫТИЙ
1) способ:
        constructor(props) {
            super(props);
            this.state = {
                years: 26
            }
            this.nextYear = this.nextYear.bind(this); // привязываем к каждому новому объекту
        }

2) способ: используем в конструкторе
        constructor(props) {
            super(props);
            this.state = {
                years: 26
            }
            this.nextYear = () => {
                this.setState(state => ({
                    years: ++state.years
                }));
            }
        }

3) class fields (как метод в классе)
       nextYear = () => {
           this.setState(state => ({
               years: ++state.years
           }))
       }

class WhoAmI extends Component {
    constructor(props) {
        super(props);
        this.state = {
            years: 26
        }
        this.nextYear = this.nextYear.bind(this);
    }

    render() {
        const {name, surname, link} = this.props;
        const {years} = this.state;
        return (
            <>
                <button onClick={this.nextYear}>++</button>
                <h1> My name is {name}, surname - {surname}, years = {years} </h1>
                <a href={link}>My profile</a>
            </>
        )
    }
}

const All = () => {
    return (
        <>
            <WhoAmI name="Mary" surname="Minikh" link="link"/>
            <WhoAmI name="Ma" surname="Min" link="link"/>
        </>
    )
}

- Можно переписать блок:
    import styled from "styled-components";
    <Header as='a'>


------------- Fetch API -----------
